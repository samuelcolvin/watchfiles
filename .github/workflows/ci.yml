name: ci

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

jobs:
  test:
    name: test py${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['3.7', '3.8', '3.9', '3.10']

    runs-on: ${{ matrix.os }}-latest

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - id: cache-py
      name: cache python
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: >
          py
          ${{ runner.os }}
          ${{ env.pythonLocation }}
          ${{ hashFiles('tests/requirements.txt') }}
          ${{ hashFiles('setup.py') }}

    - name: install rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: cache rust
      uses: Swatinem/rust-cache@v1

    - run: pip install -r tests/requirements.txt
      if: steps.cache-py.outputs.cache-hit != 'true'

    - run: pip install -e .
    - run: pip freeze

    - run: make test

    - run: coverage xml

    - uses: codecov/codecov-action@v1.0.13
      with:
        file: ./coverage.xml
        env_vars: PYTHON,OS

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - uses: actions/cache@v2
      id: cache-py
      name: cache python
      with:
        path: ${{ env.pythonLocation }}
        key: >
          py
          ${{ env.pythonLocation }}
          ${{ hashFiles('tests/requirements-linting.txt') }}
          ${{ hashFiles('setup.py') }}

    - run: pip install -r tests/requirements-linting.txt
      if: steps.cache-py.outputs.cache-hit != 'true'

    - run: SKIP_RUST_EXTENSION=1 pip install .
      if: steps.cache-py.outputs.cache-hit != 'true'

    - run: pip freeze

    - name: install rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: cache rust
      uses: Swatinem/rust-cache@v1

    - run: make lint
    - run: make mypy

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: install
      run: pip install -r docs/requirements.txt

    - name: build site
      run: mkdocs build

    - name: store docs site
      uses: actions/upload-artifact@v2
      with:
        name: docs
        path: site

  build:
    name: >
      build py3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
      (${{ matrix.alt_arch_name || matrix.arch }})
    needs: [test, lint]
#    if: "success() && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['7', '8', '9', '10']
        arch: [main, alt]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
          - os: ubuntu
            arch: alt
            alt_arch_name: aarch64
          - os: macos
            arch: alt
            alt_arch_name: arm64
        exclude:
          - os: windows
            arch: alt
          - os: macos
            python-version: '7'
            arch: alt

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'

      - name: set up rust
        if: matrix.os != 'ubuntu'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: cache rust
        id: cache-rust
        uses: Swatinem/rust-cache@v1
        # caching here seems to break macos, hence only using cache with windows, macos is fairly quick anyway
        if: matrix.os == 'windows'

      - run: curl -Lso set_version.py https://git.io/JT3rm
        if: "startsWith(github.ref, 'refs/tags/')"

      - run: python set_version.py
        if: "startsWith(github.ref, 'refs/tags/')"
        env:
          VERSION_PATH: watchfiles/version.py

      - run: rustup target add aarch64-apple-darwin
        if: matrix.os == 'macos'

      - run: rustup toolchain install stable-i686-pc-windows-msvc
        if: matrix.os == 'windows' && steps.cache-rust.outputs.cache-hit != 'true'

      - run: pip install -U setuptools wheel twine cibuildwheel

      - name: build sdist
        if: matrix.os == 'ubuntu' && matrix.python-version == '9'
        run: python setup.py sdist
        env:
          SKIP_RUST_EXTENSION: 1

      - name: Set up QEMU
        if: matrix.os == 'ubuntu'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: build ${{ matrix.platform || matrix.os }} binaries
        run: cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: 'cp3${{ matrix.python-version }}-*'
          # rust doesn't seem to be available for musl linux on i686
          CIBW_SKIP: '*-musllinux_i686'
          # we build for "alt_arch_name" if it exists, else 'auto
          CIBW_ARCHS: ${{ matrix.alt_arch_name || 'auto' }}
          # see https://cibuildwheel.readthedocs.io/en/stable/faq/#universal2, tests can run on cross-compiled binaries
          CIBW_TEST_SKIP: '*-macosx_arm64'
          CIBW_TEST_REQUIRES: pytest pytest-mock pytest-timeout dirty-equals
          CIBW_TEST_COMMAND: 'pytest {project}/tests -s'
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MUSLLINUX_X86_64_IMAGE: musllinux_1_1
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_MUSLLINUX_AARCH64_IMAGE: musllinux_1_1
          CIBW_BEFORE_BUILD: rustup show
          CIBW_BEFORE_BUILD_LINUX: >
            curl https://sh.rustup.rs -sSf | sh -s -- --profile=minimal -y &&
            rustup show

      - run: ${{ matrix.ls || 'ls -lh' }} dist/

      - run: twine check dist/*

      - uses: actions/upload-artifact@v2
        with:
          name: pypi_files
          path: dist

  list-pypi-files:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: get dist artifacts
        uses: actions/download-artifact@v2
        with:
          name: pypi_files
          path: dist

      - run: ls -lh dist/

  release:
    needs: [build, docs]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - run: pip install -U twine

      - name: get dist artifacts
        uses: actions/download-artifact@v2
        with:
          name: pypi_files
          path: dist

      - name: get docs
        uses: actions/download-artifact@v2
        with:
          name: docs
          path: site

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}

      - name: publish docs
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages
          folder: site
