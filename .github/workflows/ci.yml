name: ci

on:
  push:
    branches:
      - master
    tags:
      - '**'
  pull_request: {}

jobs:
  test:
    name: test py${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['3.7', '3.8', '3.9', '3.10']

    runs-on: ${{ matrix.os }}-latest

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: install rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - uses: actions/cache@v2
      id: cache-py
      with:
        path: ${{ env.pythonLocation }}
        key: >
          py
          ${{ runner.os }}
          ${{ env.pythonLocation }}
          ${{ hashFiles('tests/requirements.txt') }}
          ${{ hashFiles('setup.py') }}

    - uses: actions/cache@v2
      id: cache-rust
      with:
        path: |
          target
          ~/.rustup
          ~/.cargo
        key: >
          rust-stable
          ${{ runner.os }}
          ${{ hashFiles('Cargo.toml') }}
          ${{ hashFiles('Cargo.lock') }}

    - run: pip install -r tests/requirements.txt
      if: steps.cache-py.outputs.cache-hit != 'true'

    - run: pip install .
    - run: pip freeze

    - run: make test
    - run: coverage xml

    - uses: codecov/codecov-action@v1.0.13
      with:
        file: ./coverage.xml
        env_vars: PYTHON,OS

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: install rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - uses: actions/cache@v2
      id: cache-py
      with:
        path: ${{ env.pythonLocation }}
        key: >
          py
          ${{ env.pythonLocation }}
          ${{ hashFiles('tests/requirements-linting.txt') }}
          ${{ hashFiles('setup.py') }}

    - uses: actions/cache@v2
      id: cache-rust
      with:
        path: |
          target
          ~/.rustup
          ~/.cargo
        key: >
          rust-stable
          ${{ hashFiles('Cargo.toml') }}
          ${{ hashFiles('Cargo.lock') }}

    - run: pip install -r tests/requirements-linting.txt
      if: steps.cache-py.outputs.cache-hit != 'true'

    - run: SKIP_RUST_EXTENSION=1 pip install .
      if: steps.cache-py.outputs.cache-hit != 'true'

    - run: pip freeze

    - run: make lint
    - run: make mypy

  deploy:
    needs:
      - test
      - lint
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: install
        run: pip install -U pip setuptools twine wheel

      - name: set version
        run: VERSION_PATH='watchgod/version.py' python <(curl -Ls https://git.io/JT3rm)

      - run: python setup.py sdist bdist_wheel

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
